import Files

struct BoilerplateAssetConfigFactory {
	private let assetFolder: Folder

	init(assetFolder: Folder) {
		self.assetFolder = assetFolder
	}
}

extension BoilerplateAssetConfigFactory {
	func generate() throws -> BoilerplateAssetConfig {
		let layerFolders = assetFolder.subfolders.filter { !$0.isEmpty() }
		let layerNames = layerFolders.map(\.name).sorted(by: <)

		let combinations = try layerFolders
			.flatMap { layerFolder in
				let names = layerFolder.files.map(\.nameExcludingExtension) + layerFolder.subfolders.map(\.name)
				return try names
					.map { BoilerplateAssetConfig.BoilerplateCombination(target: try .init(layerExpression: layerFolder.name, nameExpression: "^\($0)$"), dependencies: []) }
			}

		let probabilities = try layerFolders
			.flatMap { layerFolder in
				let names = layerFolder.files.map(\.nameExcludingExtension) + layerFolder.subfolders.map(\.name)
				return try names
					.map { try BoilerplateAssetConfig.BoilerplateSubject(layerExpression: layerFolder.name, nameExpression: "^\($0)$") }
					.map { BoilerplateAssetConfig.BoilerplateRandomization.BoilerplateProbability(target: $0, weight: 1, divideByMatches: false) }
			}

		let traits = try layerFolders
			.flatMap { layerFolder in
				let names = layerFolder.files.map(\.nameExcludingExtension) + layerFolder.subfolders.map(\.name)
				return try names
					.map {
						BoilerplateAssetConfig.BoilerplateMetadata.BoilerplateTraitData(
							traits: [.label(trait: layerFolder.name, value: .string($0))],
							conditions: [try .init(layerExpression: layerFolder.name, nameExpression: "^\($0)$")])
					}
			}

		let subjectSample = try layerFolders
			.first
			.flatMap { folder in
				try folder.files.first.map { file in
					try BoilerplateAssetConfig.BoilerplateSubject(layerExpression: folder.name, nameExpression: file.nameExcludingExtension)
				}
			}

		let dependenciesSample = [subjectSample]
			.compactMap { $0 }

		let allocationsSample = dependenciesSample
			.map { BoilerplateAssetConfig.BoilerplateRandomization.BoilerplateAllocation(target: $0, quantity: 10) }

		return .init(
			order: .init(
				selection: layerNames,
				layerDepth: layerNames),
			combinations: combinations,
			specials: [.init(
				index: 0,
				dependencies: dependenciesSample)],
			randomization: .init(
				probabilities: probabilities,
				allocations: allocationsSample),
			drawSerial: .init(
				enabled: false,
				format: "#%05d",
				font: "Helvetica",
				size: 38,
				color: "ffffff",
				offsetX: 40,
				offsetY: 15),
			metadata: .init(
				baseUrl: .init(string: "https://example.com/") ?? .init(filePath: ""),
				nameFormat: "Magia NFT %05d",
				descriptionFormat: "This NFT is generated by Magia.  \nMagia is an ultimate NFT generator for the proffesional creators.",
				externalUrlFormat: "https://example_frontend.com/nfts/%05d",
				backgroundColor: "000000",
				traitData: traits,
				traitOrder: layerNames))
	}
}
